#include <stdio.h>
#include <stdlib.h>
#include "mpi.h"
#include <time.h>
#include "hdf5.h"
#include "hdf5_hl.h"

void restoreIntMeta(char *fileName,char *dataName,int *data);
void saveIntMeta(char *fileName,char *dataName,int *data);
void restoreDoubleData(char *fileName,char *dataName,double *data,int totalCnt,int dataNum,int offSet);
void restoreIntData(char *fileName,char *dataName,int *data,int totalCnt,int dataNum,int offSet);
void saveParticleComp_Double(double *data,char *fileName,char *dataName,int totalCnt,int cnt,int offSet);
void saveParticleComp_Int(int *data,char *fileName,char *dataName,int totalCnt,int cnt,int offSet);
double calMomentum(double old2,double old1,double p,int resolX);
void resolCalX(double ***field,double ***reField,int istart,int iend,int jstart,int jend,int kstart,int kend,int resolX,int rankX,int edge);
void resolCalY(double ***field,double ***reField,int istart,int iend,int jstart,int jend,int kstart,int kend,int resolY,int rankY,int edge);
void calBField(double ***fieldOld,double ***fieldNow,double ***fieldNext,int istart,int iend,int jstart,int jend,int kstart,int kend,int resolX);
void calParameter(int nx,int *istart,int *iend,int *saveNxSub,int rankX,int *biasX,int reIend,int reNxSub,int L);
double ***memoryAsign(int nx, int ny, int nz);
void deleteField(double ***field,int nx,int ny,int nz);
int ***memoryAsignInt(int nx, int ny, int nz);
void deleteFieldInt(int ***field,int nx,int ny,int nz);
void restoreFieldComp(double ***data,char *fileName,char *dataName,int nx,int ny,int nz,int nxSub,int nySub,int nzSub,int istart,int iend,int jstart,int jend,int kstart,int kend,int *offSet);
double randomValue(double beta);
double calInter2D(double ***field,int i,int j,double x,double y);



int main(int argc, char *argv[])
{
    int dimension,L,M,N,resolX,resolY,resolZ,step,numInCell;
    int i,j,k,s,n,nx,ny,nz,nSpecies,reNx,reNy,reNz,index,number;
    int totalCnt,remain,sub,cntSub,start,rank,cnt;
    int reTotalCnt,reCntSub,reStart,tmpInt;
    double x,y,z,dx,dy,dz,randTest,tmpDouble;
    double minX,maxX,minY,maxY,minZ,maxZ;
    int *recv,*dataIndex,*dataCores,*reDataIndex,*reDataCores,*intData;
    int ***reCnt;
    double *dataX,*dataY,*dataZ,*doubleData;
    int minXDomain,minYDomain,minZDomain;
    int minXSub,maxXSub,minYSub,maxYSub,minZSub,maxZSub;
    int istart,iend,jstart,jend,kstart,kend,offset[3],offSet[3];
    int reNxSub,reNySub,reNzSub,reIend,reJend,reKend;
    int saveNxSub,saveNySub,saveNzSub,biasX,biasY,biasZ;
    int saveIstart,saveJstart,saveKstart,saveIend,saveJend,saveKend;
    int remainX,remainY,remainZ,subX,subY,subZ,tmpX,tmpY,tmpZ;
    int rankX,rankY,rankZ,nxSub,nySub,nzSub;
    double ***reField,***reField1,***fieldOld,***fieldNow,***fieldNext;
    double ***density,***reDensity;

    FILE *out;
    char fileName[100],dataName[100],outFile[100],fileName1[100];
    hid_t file_id,group_id;
    herr_t hdfstatus;

    int myrank, nTasks;
    MPI_Status status; 

    MPI_Init(&argc,&argv);
    MPI_Comm_size(MPI_COMM_WORLD, &nTasks);
    MPI_Comm_rank(MPI_COMM_WORLD, &myrank);

    if(argc < 9) 
    {  
      printf("mpirun -np N ./resolParticle dimension step L M N resolX resolY resolZ numInCell\n"); 
      exit(0); 
    }

    dimension=atoi(argv[1]);
    step=atoi(argv[2]);
    L=atoi(argv[3]);
    M=atoi(argv[4]);
    N=atoi(argv[5]);
    resolX=atoi(argv[6]);
    resolY=atoi(argv[7]);
    resolZ=atoi(argv[8]);
    numInCell=atoi(argv[9]);
    if(L*M*N!=nTasks)  {
      printf("check nTasks!. Now L=%d,M=%d,N=%d\n",L,M,N);
      exit(0);
    }


    //save outfile
    sprintf(outFile,"dumpParticle%d.h5",step*resolX);
    if(myrank==0)
    {
      file_id=H5Fcreate(outFile,H5F_ACC_TRUNC,H5P_DEFAULT,H5P_DEFAULT);
      H5Fclose(file_id);
    }
    else ;

    //set memory
    recv=(int *)malloc(nTasks*sizeof(int ));

    //restore meta data
    sprintf(fileName,"dumpParticleResol%d.h5",step);
    if(myrank==0)  {
      restoreIntMeta(fileName,"/nSpecies",&nSpecies);
      restoreIntMeta(fileName,"/nx",&nx);
      restoreIntMeta(fileName,"/ny",&ny);
      restoreIntMeta(fileName,"/nz",&nz);
      restoreIntMeta(fileName,"/minXDomain",&minXDomain);
      restoreIntMeta(fileName,"/minYDomain",&minYDomain);
      restoreIntMeta(fileName,"/minZDomain",&minZDomain);
    }    else   ;
    MPI_Bcast(&nSpecies,1,MPI_INT,0,MPI_COMM_WORLD);
    MPI_Bcast(&nx,1,MPI_INT,0,MPI_COMM_WORLD);
    MPI_Bcast(&ny,1,MPI_INT,0,MPI_COMM_WORLD);
    MPI_Bcast(&nz,1,MPI_INT,0,MPI_COMM_WORLD);
    MPI_Bcast(&minXDomain,1,MPI_INT,0,MPI_COMM_WORLD);
    MPI_Bcast(&minYDomain,1,MPI_INT,0,MPI_COMM_WORLD);
    MPI_Bcast(&minZDomain,1,MPI_INT,0,MPI_COMM_WORLD);
    if(minXDomain>0)  minXDomain-=1;  else	;

    nxSub=nx/L;
    subX=nxSub;
    remainX=nx%L;
    minX=maxX=0;
    nySub=ny/M;
    subY=nySub;
    remainY=ny%M;
    minY=maxY=0;
    nzSub=nz/N;
    subZ=nzSub;
    remainZ=nz%N;
    minZ=maxZ=0;

    minX=maxX=0;
    for(rankX=0; rankX<L; rankX++)
    {
      if(rankX<remainX)   tmpX=subX+1;
      else                tmpX=subX;
      minX=maxX;
      maxX=minX+tmpX;

      minZ=maxZ=minZDomain;
      for(rankZ=0; rankZ<N; rankZ++)
      {
        if(rankZ<remainZ)   tmpZ=subZ+1;
        else                tmpZ=subZ;
        minZ=maxZ;
        maxZ=minZ+tmpZ;

        minY=maxY=minYDomain;
        for(rankY=0; rankY<M; rankY++)
        {
          if(rankY<remainY)   tmpY=subY+1;
          else                tmpY=subY;
          minY=maxY;
          maxY=minY+tmpY;

          rank=rankY+rankZ*M+rankX*(M*N);
          if(myrank==rank)
          {
             nxSub=tmpX;
             nySub=tmpY;
             nzSub=tmpZ;
             minXSub=minX;
             maxXSub=maxX;
             minYSub=minY;
             maxYSub=maxY;
             minZSub=minZ;
             maxZSub=maxZ;
          }
        }
      }
    }
    istart=2;
    iend=nxSub+2;
    jstart=0;
    jend=1;
    kstart=0;
    kend=1;
    if(dimension>1)  {
      jstart=2;
      jend=nySub+2;
    }
    if(dimension>2)  {
      kstart=2;
      kend=nzSub+2;
    }

    rankX=myrank/(M*N);
    rankZ=(myrank%(M*N))/M;
    rankY=(myrank%(M*N))%M;

    //setting resolution change
    reNx=nx*resolX;
    reNy=ny*resolY;
    reNz=nz*resolZ;

    reNxSub=nxSub*resolX;
    reNySub=nySub*resolY;
    reNzSub=nzSub*resolZ;
    reIend=reNxSub+2;
    reJend=reKend=1;
    if(dimension>1)
      reJend=reNySub+2;
    if(dimension>2)
      reKend=reNzSub+2;

    //set domain range
    minX=minXDomain*resolX;
    maxX=(minXDomain+nx)*resolX;
    minY=minYDomain*resolY;
    maxY=(minYDomain+ny)*resolY;
    minZ=minZDomain*resolZ;
    maxZ=(minZDomain+ny)*resolZ;


    calParameter(reNx+5,&saveIstart,&saveIend,&saveNxSub,rankX,&biasX,reIend,reNxSub,L);
    saveJstart=saveKstart=0;
    saveKend=saveKend=saveNySub=saveNzSub=1;
    if(dimension>1)
      calParameter(reNy+5,&saveJstart,&saveJend,&saveNySub,rankY,&biasY,reJend,reNySub,M);
    if(dimension>2)
      calParameter(reNz+5,&saveKstart,&saveKend,&saveNzSub,rankZ,&biasZ,reKend,reNzSub,N);

    switch (dimension)  {
    case 2 :
      fieldOld=memoryAsign(nxSub+5,nySub+5,1);
      fieldNow=memoryAsign(nxSub+5,nySub+5,1);
      fieldNext=memoryAsign(nxSub+5,nySub+5,1);
      density=memoryAsign(nxSub+5,nySub+5,1);

      offset[0]=minXSub;
      offset[1]=minYSub-minYDomain;
      offset[2]=0;

      offSet[0]=(minXSub)*resolX+biasX;
      offSet[1]=(minYSub-minYDomain)*resolY+biasY;
      offSet[2]=0;

      if(resolX>1 && resolY==1)
      {  }
      else if(resolX==1 && resolY>1)
      {  }
      else if(resolX>1 && resolY>1) 
      {
        //calculate for X direction
        reField=memoryAsign(reNxSub+5,nySub+5,1);
        reField1=memoryAsign(reNxSub+5,reNySub+5,1);
        reDensity=memoryAsign(reNxSub+5,reNySub+5,1);
        reCnt=memoryAsignInt(reNxSub+5,reNySub+5,1);

        //save PMap field
        for(s=0; s<nSpecies; s++) 
        {
          //create group
          if(myrank==0)    {
            file_id=H5Fopen(outFile,H5F_ACC_RDWR,H5P_DEFAULT);
            sprintf(dataName,"%dParticle",s);
            group_id=H5Gcreate2(file_id,dataName,H5P_DEFAULT,H5P_DEFAULT,H5P_DEFAULT);
            H5Gclose(group_id);
            H5Fclose(file_id);
          }  else         ;
          MPI_Barrier(MPI_COMM_WORLD);

          //Restoring density
          sprintf(dataName,"density%d",s);
          sprintf(fileName,"dumpDensityResol%d.h5",step);
          restoreFieldComp(density,fileName,dataName,nx+5,ny+5,1,nxSub+5,nySub+5,nzSub,0,iend+3,0,jend+3,0,1,offset);
          resolCalX(density,reField,1,iend+1,0,jend+3,0,1,resolX,rankX,0);
          resolCalY(reField,reDensity,1,reIend+1,1,jend+1,0,1,resolY,rankY,1);
          
          //create particles
          k=0;
          cntSub=0;
          for(i=istart; i<reIend; i++)
            for(j=jstart; j<reJend; j++)
            {
              number=(int)(reDensity[i][j][k]*numInCell);
              randTest=reDensity[i][j][k]*numInCell-number;
              if(randTest>randomValue(1.0))
                number++;
              else	;
              reCnt[i][j][k]=number;
              cntSub+=number;
            }

          //calculating totalCnt and start
          MPI_Gather(&cntSub,1,MPI_INT,recv,1,MPI_INT,0,MPI_COMM_WORLD);
          MPI_Bcast(recv,nTasks,MPI_INT,0,MPI_COMM_WORLD);

          start=0;
          for(i=0; i<myrank; i++)
            start+=recv[i];
          totalCnt=0;
          for(i=0; i<nTasks; i++)
            totalCnt+=recv[i];

          //setup saving memory          
          dataX = (double *)malloc(cntSub*sizeof(double ));
          dataY = (double *)malloc(cntSub*sizeof(double ));
          doubleData = (double *)malloc(cntSub*sizeof(double ));
          intData = (int *)malloc(cntSub*sizeof(int ));
         
          index=0;
          for(i=istart; i<reIend; i++)
            for(j=jstart; j<reJend; j++)
            {
              cnt=reCnt[i][j][k];
              for(n=0; n<cnt; n++)  {
                dataX[index]=randomValue(1.0)+i;
                dataY[index]=randomValue(1.0)+j;
                index++;
              }
            }         

          //dataX
          for(n=0; n<cntSub; n++) 
            doubleData[n]=dataX[n]-istart+minXSub*resolX;
          sprintf(dataName,"%dParticle/x",s);
          saveParticleComp_Double(doubleData,outFile,dataName,totalCnt,cntSub,start);
          //dataY
          for(n=0; n<cntSub; n++) 
            doubleData[n]=dataY[n]-jstart+minYSub*resolY;
          sprintf(dataName,"%dParticle/y",s);
          saveParticleComp_Double(doubleData,outFile,dataName,totalCnt,cntSub,start);
          //dataIndex
          for(n=0; n<cntSub; n++) 
            intData[n]=n;
          sprintf(dataName,"%dParticle/index",s);
          saveParticleComp_Int(intData,outFile,dataName,totalCnt,cntSub,start);
          //dataCore
          for(n=0; n<cntSub; n++) 
            intData[n]=myrank;
          sprintf(dataName,"%dParticle/core",s);
          saveParticleComp_Int(intData,outFile,dataName,totalCnt,cntSub,start);
          //Px
          sprintf(dataName,"%dPx",s);
          sprintf(fileName,"dumpPMapResol%d.h5",step-1);
          restoreFieldComp(fieldOld,fileName,dataName,nx+5,ny+5,1,nxSub+5,nySub+5,nzSub,0,iend+3,0,jend+3,0,1,offset);
          sprintf(fileName,"dumpPMapResol%d.h5",step);
          restoreFieldComp(fieldNow,fileName,dataName,nx+5,ny+5,1,nxSub+5,nySub+5,nzSub,0,iend+3,0,jend+3,0,1,offset);
          sprintf(fileName,"dumpPMapResol%d.h5",step+1);
          restoreFieldComp(fieldNow,fileName,dataName,nx+5,ny+5,1,nxSub+5,nySub+5,nzSub,0,iend+3,0,jend+3,0,1,offset);
          calBField(fieldOld,fieldNow,fieldNext,0,iend+3,0,jend+3,0,1,resolX);
          resolCalX(fieldNow,reField,2,iend,0,jend+3,0,1,resolX,rankX,1);
          resolCalY(reField,reField1,2,reIend,2,jend,0,1,resolY,rankY,1);
          for(n=0; n<cntSub; n++)  {
            i=(int)(dataX[n]);
            j=(int)(dataY[n]);
            x=dataX[n]-i;
            y=dataY[n]-j;
            doubleData[n]=calInter2D(reField1,i,j,x,y);
          }
          sprintf(dataName,"%dParticle/px",s);
          saveParticleComp_Double(doubleData,outFile,dataName,totalCnt,cntSub,start);
          //Py
          sprintf(dataName,"%dPy",s);
          sprintf(fileName,"dumpPMapResol%d.h5",step-1);
          restoreFieldComp(fieldOld,fileName,dataName,nx+5,ny+5,1,nxSub+5,nySub+5,nzSub,0,iend+3,0,jend+3,0,1,offset);
          sprintf(fileName,"dumpPMapResol%d.h5",step);
          restoreFieldComp(fieldNow,fileName,dataName,nx+5,ny+5,1,nxSub+5,nySub+5,nzSub,0,iend+3,0,jend+3,0,1,offset);
          sprintf(fileName,"dumpPMapResol%d.h5",step+1);
          restoreFieldComp(fieldNow,fileName,dataName,nx+5,ny+5,1,nxSub+5,nySub+5,nzSub,0,iend+3,0,jend+3,0,1,offset);
          calBField(fieldOld,fieldNow,fieldNext,0,iend+3,0,jend+3,0,1,resolX);
          resolCalX(fieldNow,reField,2,iend,0,jend+3,0,1,resolX,rankX,1);
          resolCalY(reField,reField1,2,reIend,2,jend,0,1,resolY,rankY,1);
          for(n=0; n<cntSub; n++)  {
            i=(int)(dataX[n]);
            j=(int)(dataY[n]);
            x=dataX[n]-i;
            y=dataY[n]-j;
            doubleData[n]=calInter2D(reField1,i,j,x,y);
          }
          sprintf(dataName,"%dParticle/py",s);
          saveParticleComp_Double(doubleData,outFile,dataName,totalCnt,cntSub,start);
          //Pz
          sprintf(dataName,"%dPz",s);
          sprintf(fileName,"dumpPMapResol%d.h5",step-1);
          restoreFieldComp(fieldOld,fileName,dataName,nx+5,ny+5,1,nxSub+5,nySub+5,nzSub,0,iend+3,0,jend+3,0,1,offset);
          sprintf(fileName,"dumpPMapResol%d.h5",step);
          restoreFieldComp(fieldNow,fileName,dataName,nx+5,ny+5,1,nxSub+5,nySub+5,nzSub,0,iend+3,0,jend+3,0,1,offset);
          sprintf(fileName,"dumpPMapResol%d.h5",step+1);
          restoreFieldComp(fieldNow,fileName,dataName,nx+5,ny+5,1,nxSub+5,nySub+5,nzSub,0,iend+3,0,jend+3,0,1,offset);
          calBField(fieldOld,fieldNow,fieldNext,0,iend+3,0,jend+3,0,1,resolX);
          resolCalX(fieldNow,reField,2,iend,0,jend+3,0,1,resolX,rankX,1);
          resolCalY(reField,reField1,2,reIend,2,jend,0,1,resolY,rankY,1);
          for(n=0; n<cntSub; n++)  {
            i=(int)(dataX[n]);
            j=(int)(dataY[n]);
            x=dataX[n]-i;
            y=dataY[n]-j;
            doubleData[n]=calInter2D(reField1,i,j,x,y);
          }
          sprintf(dataName,"%dParticle/pz",s);
          saveParticleComp_Double(doubleData,outFile,dataName,totalCnt,cntSub,start);

          sprintf(dataName,"%dParticle/totalCnt",s);
          if(myrank==0) 
            saveIntMeta(outFile,dataName,&totalCnt);
          else	;
          
          free(doubleData);
          free(intData);
        }	//End of nSpecies

        deleteField(reField,reNxSub+5,nySub+5,1);
        deleteField(reField1,reNxSub+5,reNySub+5,1);
        deleteField(reDensity,reNxSub+5,reNySub+5,1);
        deleteFieldInt(reCnt,reNxSub+5,reNySub+5,1);
      }
   
      deleteField(fieldOld,nxSub+5,nySub+5,1);
      deleteField(fieldNow,nxSub+5,nySub+5,1);
      deleteField(fieldNext,nxSub+5,nySub+5,1);
      deleteField(density,nxSub+5,nySub+5,1);
      break;
    }

    minXDomain*=resolX;
    minYDomain*=resolY;
    minZDomain*=resolZ;
    if(myrank==0)  {
      saveIntMeta(outFile,"/nSpecies",&nSpecies);
      saveIntMeta(outFile,"/nx",&reNx);
      saveIntMeta(outFile,"/ny",&reNy);
      saveIntMeta(outFile,"/nz",&reNz);
      saveIntMeta(outFile,"/minXDomain",&minXDomain);
      saveIntMeta(outFile,"/minYDomain",&minYDomain);
      saveIntMeta(outFile,"/minZDomain",&minZDomain);
    }    else   ;
 
    free(recv);
  
    MPI_Finalize();

    return 0;
}

double calMomentum(double old2,double old1,double p,int resolX)
{
  double y1,y2,y3,a,b,c,dx,x,result;

  a=0.5*(old2+p)-old1;
  b=2.0*old1-1.5*old2-0.5*p;
  c=old2;
  dx=1.0/((double)resolX);
  x=2.0-dx*0.5;
  
  result=a*x*x+b*x+c;
  return result;
}

void saveParticleComp_Double(double *data,char *fileName,char *dataName,int totalCnt,int cnt,int offSet)
{
  int i,j,k;
  int myrank, nTasks;
  MPI_Comm_rank(MPI_COMM_WORLD, &myrank);
  MPI_Comm_size(MPI_COMM_WORLD, &nTasks);

  hid_t file_id,dset_id,plist_id,tic_id;
  herr_t status;
  hid_t total_file_space,subfilespace,filespace,memspace,ticspace;
  hsize_t dimsf[1],count[1],offset[1];

  plist_id=H5Pcreate(H5P_FILE_ACCESS);
  H5Pset_fapl_mpio(plist_id,MPI_COMM_WORLD,MPI_INFO_NULL);

  file_id=H5Fopen(fileName,H5F_ACC_RDWR,plist_id);
  H5Pclose(plist_id);

  dimsf[0]=totalCnt;
  filespace=H5Screate_simple(1,dimsf,NULL);

  count[0]=cnt;
  offset[0]=offSet;
  memspace=H5Screate_simple(1,count,NULL);

  dset_id=H5Dcreate2(file_id,dataName,H5T_NATIVE_DOUBLE,filespace,H5P_DEFAULT,H5P_DEFAULT,H5P_DEFAULT);
  subfilespace=H5Dget_space(dset_id);
  H5Sselect_hyperslab(subfilespace,H5S_SELECT_SET,offset,NULL,count,NULL);
  plist_id=H5Pcreate(H5P_DATASET_XFER);
  H5Pset_dxpl_mpio(plist_id,H5FD_MPIO_INDEPENDENT);
  status = H5Dwrite(dset_id, H5T_NATIVE_DOUBLE,memspace,subfilespace,plist_id,data);
  H5Pclose(plist_id);
  H5Sclose(subfilespace);
  H5Dclose(dset_id);

  H5Sclose(memspace);
  H5Sclose(filespace);
  H5Fclose(file_id);
}

void saveParticleComp_Int(int *data,char *fileName,char *dataName,int totalCnt,int cnt,int offSet)
{
  int i,j,k;
  int myrank, nTasks;
  MPI_Comm_rank(MPI_COMM_WORLD, &myrank);
  MPI_Comm_size(MPI_COMM_WORLD, &nTasks);

  hid_t file_id,dset_id,plist_id,tic_id;
  herr_t status;
  hid_t total_file_space,subfilespace,filespace,memspace,ticspace;
  hsize_t dimsf[1],count[1],offset[1];

  plist_id=H5Pcreate(H5P_FILE_ACCESS);
  H5Pset_fapl_mpio(plist_id,MPI_COMM_WORLD,MPI_INFO_NULL);

  file_id=H5Fopen(fileName,H5F_ACC_RDWR,plist_id);
  H5Pclose(plist_id);

  dimsf[0]=totalCnt;
  filespace=H5Screate_simple(1,dimsf,NULL);

  count[0]=cnt;
  offset[0]=offSet;
  memspace=H5Screate_simple(1,count,NULL);

  dset_id=H5Dcreate2(file_id,dataName,H5T_NATIVE_INT,filespace,H5P_DEFAULT,H5P_DEFAULT,H5P_DEFAULT);
  subfilespace=H5Dget_space(dset_id);
  H5Sselect_hyperslab(subfilespace,H5S_SELECT_SET,offset,NULL,count,NULL);
  plist_id=H5Pcreate(H5P_DATASET_XFER);
  H5Pset_dxpl_mpio(plist_id,H5FD_MPIO_INDEPENDENT);
  status = H5Dwrite(dset_id, H5T_NATIVE_INT,memspace,subfilespace,plist_id,data);
  H5Pclose(plist_id);
  H5Sclose(subfilespace);
  H5Dclose(dset_id);

  H5Sclose(memspace);
  H5Sclose(filespace);
  H5Fclose(file_id);
}



void restoreIntData(char *fileName,char *dataName,int *data,int totalCnt,int dataNum,int offSet)
{
  int myrank, nTasks;
  MPI_Comm_rank(MPI_COMM_WORLD, &myrank);
  MPI_Comm_size(MPI_COMM_WORLD, &nTasks);

  hid_t file_id,dset_id,plist_id,group_id;
  herr_t status;
  hid_t subfilespace,filespace,memspace;
  hsize_t dimsf[1],count[1],offset[1];

  plist_id=H5Pcreate(H5P_FILE_ACCESS);
  H5Pset_fapl_mpio(plist_id,MPI_COMM_WORLD,MPI_INFO_NULL);

  file_id=H5Fopen(fileName,H5F_ACC_RDWR,plist_id);
  H5Pclose(plist_id);
  dimsf[0]=totalCnt;
  filespace=H5Screate_simple(1,dimsf,NULL);

  count[0]=dataNum;
  offset[0]=offSet;
  memspace=H5Screate_simple(1,count,NULL);

  dset_id=H5Dopen2(file_id,dataName,H5P_DEFAULT);
  subfilespace=H5Dget_space(dset_id);
  H5Sselect_hyperslab(subfilespace,H5S_SELECT_SET,offset,NULL,count,NULL);
  plist_id=H5Pcreate(H5P_DATASET_XFER);
  H5Pset_dxpl_mpio(plist_id,H5FD_MPIO_INDEPENDENT);
  status = H5Dread(dset_id, H5T_NATIVE_INT,memspace,subfilespace,plist_id,data);
  H5Pclose(plist_id);
  H5Sclose(subfilespace);
  H5Dclose(dset_id);

  H5Sclose(memspace);
  H5Sclose(filespace);
  H5Fclose(file_id);
}


void restoreDoubleData(char *fileName,char *dataName,double *data,int totalCnt,int dataNum,int offSet)
{
  int myrank, nTasks;
  MPI_Comm_rank(MPI_COMM_WORLD, &myrank);
  MPI_Comm_size(MPI_COMM_WORLD, &nTasks);

  hid_t file_id,dset_id,plist_id,group_id;
  herr_t status;
  hid_t subfilespace,filespace,memspace;
  hsize_t dimsf[1],count[1],offset[1];

  plist_id=H5Pcreate(H5P_FILE_ACCESS);
  H5Pset_fapl_mpio(plist_id,MPI_COMM_WORLD,MPI_INFO_NULL);

  file_id=H5Fopen(fileName,H5F_ACC_RDWR,plist_id);
  H5Pclose(plist_id);
  dimsf[0]=totalCnt;
  filespace=H5Screate_simple(1,dimsf,NULL);

  count[0]=dataNum;
  offset[0]=offSet;
  memspace=H5Screate_simple(1,count,NULL);

  dset_id=H5Dopen2(file_id,dataName,H5P_DEFAULT);
  subfilespace=H5Dget_space(dset_id);
  H5Sselect_hyperslab(subfilespace,H5S_SELECT_SET,offset,NULL,count,NULL);
  plist_id=H5Pcreate(H5P_DATASET_XFER);
  H5Pset_dxpl_mpio(plist_id,H5FD_MPIO_INDEPENDENT);
  status = H5Dread(dset_id, H5T_NATIVE_DOUBLE,memspace,subfilespace,plist_id,data);
  H5Pclose(plist_id);
  H5Sclose(subfilespace);
  H5Dclose(dset_id);

  H5Sclose(memspace);
  H5Sclose(filespace);
  H5Fclose(file_id);
}

void saveIntMeta(char *fileName,char *dataName,int *data)
{
  hid_t file_id,dset_id,filespace;
  hsize_t metaDim[1];
  herr_t status;

  metaDim[0]=1;

  file_id=H5Fopen(fileName,H5F_ACC_RDWR,H5P_DEFAULT);
  filespace=H5Screate_simple(1,metaDim,NULL);
  dset_id=H5Dcreate2(file_id,dataName,H5T_NATIVE_INT,filespace,H5P_DEFAULT,H5P_DEFAULT,H5P_DEFAULT);
  status=H5Dwrite(dset_id,H5T_NATIVE_INT,H5S_ALL,H5S_ALL,H5P_DEFAULT,data);
  H5Dclose(dset_id);
  H5Sclose(filespace);
  H5Fclose(file_id);
}

void restoreIntMeta(char *fileName,char *dataName,int *data)
{
  hid_t file_id,dset_id,filespace;
  hsize_t metaDim[1];
  herr_t status;

  file_id=H5Fopen(fileName,H5F_ACC_RDWR,H5P_DEFAULT);
  filespace=H5Screate_simple(1,metaDim,NULL);
  dset_id=H5Dopen2(file_id,dataName,H5P_DEFAULT);
  status=H5Dread(dset_id,H5T_NATIVE_INT,H5S_ALL,H5S_ALL,H5P_DEFAULT,data);
  H5Dclose(dset_id);
  H5Sclose(filespace);
  H5Fclose(file_id);
}

void calParameter(int nx,int *istart,int *iend,int *saveNxSub,int rankX,int *biasX,int reIend,int reNxSub,int L)
{
  if(L==1) {
    *istart=0;
    *iend=reIend+3;
    *biasX=0;
    *saveNxSub=nx;
  } else  {
    if(rankX==0)  {
      *istart=0;
      *iend=reIend;
      *saveNxSub=reNxSub+2;
      *biasX=0;
    }  else if(rankX==L-1)  {
      *istart=2;
      *iend=reIend+3;
      *saveNxSub=reNxSub+3;
      *biasX=2;
    } else  {
      *istart=2;
      *iend=reIend;
      *saveNxSub=reNxSub;
      *biasX=2;
    }
  }
}

double ***memoryAsign(int nx, int ny, int nz)
{
   int i,j,k;
   double ***field;

   field = (double ***)malloc((nx)*sizeof(double **));
   for(i=0; i<nx; i++)
   {
     field[i] = (double **)malloc((ny)*sizeof(double *));
     for(j=0; j<ny; j++)
       field[i][j] = (double *)malloc((nz)*sizeof(double ));
   }

   for(i=0; i<nx; i++)
     for(j=0; j<ny; j++)
       for(k=0; k<nz; k++){
         field[i][j][k]=0.0;
       }
   return field;
}

void deleteField(double ***field,int nx,int ny,int nz)
{
   int i,j,k;
   for(i=0; i<nx; i++)
   {
     for(j=0; j<ny; j++)
       free(field[i][j]);
     free(field[i]);
   }
   free(field);
}

int ***memoryAsignInt(int nx, int ny, int nz)
{
   int i,j,k;
   int ***field;

   field = (int ***)malloc((nx)*sizeof(int **));
   for(i=0; i<nx; i++)
   {
     field[i] = (int **)malloc((ny)*sizeof(int *));
     for(j=0; j<ny; j++)
       field[i][j] = (int *)malloc((nz)*sizeof(int ));
   }

   for(i=0; i<nx; i++)
     for(j=0; j<ny; j++)
       for(k=0; k<nz; k++){
         field[i][j][k]=0;
       }
   return field;
}

void deleteFieldInt(int ***field,int nx,int ny,int nz)
{
   int i,j,k;
   for(i=0; i<nx; i++)
   {
     for(j=0; j<ny; j++)
       free(field[i][j]);
     free(field[i]);
   }
   free(field);
}

void restoreFieldComp(double ***data,char *fileName,char *dataName,int nx,int ny,int nz,int nxSub,int nySub,int nzSub,int istart,int iend,int jstart,int jend,int kstart,int kend,int *offSet)
{
  int i,j,k,start;
  double *field;
  char name[100];
  int myrank, nTasks;
  MPI_Comm_rank(MPI_COMM_WORLD, &myrank);
  MPI_Comm_size(MPI_COMM_WORLD, &nTasks);

  hid_t file_id,dset_id,plist_id;
  herr_t status;
  hid_t subfilespace,filespace,memspace;
  hsize_t dimsf[3],count[3],offset[3];

  plist_id=H5Pcreate(H5P_FILE_ACCESS);
  H5Pset_fapl_mpio(plist_id,MPI_COMM_WORLD,MPI_INFO_NULL);
  file_id=H5Fopen(fileName,H5F_ACC_RDWR,plist_id);
  H5Pclose(plist_id);
  dimsf[0]=ny;
  dimsf[1]=nx;
  dimsf[2]=nz;
  filespace=H5Screate_simple(3,dimsf,NULL);

  count[0]=nySub;
  count[1]=nxSub;
  count[2]=nzSub;
  offset[0]=offSet[1];
  offset[1]=offSet[0];
  offset[2]=offSet[2];
  memspace=H5Screate_simple(3,count,NULL);

  field = (double *)malloc(nxSub*nySub*nzSub*sizeof(double ));

  dset_id=H5Dopen2(file_id,dataName,H5P_DEFAULT);
  subfilespace=H5Dget_space(dset_id);
  H5Sselect_hyperslab(subfilespace,H5S_SELECT_SET,offset,NULL,count,NULL);
  plist_id=H5Pcreate(H5P_DATASET_XFER);
  H5Pset_dxpl_mpio(plist_id,H5FD_MPIO_COLLECTIVE);
  status = H5Dread(dset_id, H5T_NATIVE_DOUBLE,memspace,subfilespace,plist_id,field);
  start=0;
  for(j=jstart; j<jend; j++)
    for(i=istart; i<iend; i++)
    {
      for(k=kstart; k<kend; k++)
        data[i][j][k]=field[start+k-kstart];
      start+=nzSub;
    }
  H5Pclose(plist_id);
  H5Sclose(subfilespace);
  H5Dclose(dset_id);

  H5Sclose(memspace);
  H5Sclose(filespace);
  H5Fclose(file_id);
  free(field);
}

void calBField(double ***fieldOld,double ***fieldNow,double ***fieldNext,int istart,int iend,int jstart,int jend,int kstart,int kend,int resolX)
{
  int i,j,k;
  double y1,y2,y3,a,b,c,dx,x;

  for(i=istart; i<iend; i++)
    for(j=jstart; j<jend; j++)
      for(k=kstart; k<kend; k++)
      {
        y1=fieldOld[i][j][k];
        y2=fieldNow[i][j][k];
        y3=fieldNext[i][j][k];
        a=0.5*(y1+y3)-y2;
        b=2.0*y2-1.5*y1-0.5*y3;
        c=y1;
        dx=1.0/((double)resolX);
        x=0.5+dx*0.5;
        fieldNow[i][j][k]=(a*x*x+b*x+c);
      }
}

void resolCalY(double ***field,double ***reField,int istart,int iend,int jstart,int jend,int kstart,int kend,int resolY,int rankY,int edge)
{
  int jj,j1,i,j,k,n;
  double y1,y2,y3,a,b,c,dy,yy,y;

  dy=1.0/((double)resolY);
  if(edge==1)
  {
    for(i=istart; i<iend; i++)
      for(j=jstart; j<jend; j++)
        for(k=kstart; k<kend; k++)
        {
          for(n=0; n<resolY; n++)  {
            yy=dy*n;
            jj=((int)(0.5+yy))+j;
            y1=field[i][jj-1][k];
            y2=field[i][jj][k];
            y3=field[i][jj+1][k];
            a=0.5*(y1+y3)-y2;
            b=2.0*y2-1.5*y1-0.5*y3;
            c=y1;
            y=1.0+yy-(int)(0.5+yy);
            j1=(j-jstart)*resolY+jstart;
            reField[i][j1+n][k]=a*y*y+b*y+c;
          }
        }
  }
  else          //edge==0
  {
    for(i=istart; i<iend; i++)
      for(j=jstart; j<jend; j++)
        for(k=kstart; k<kend; k++)
        {
          for(n=0; n<resolY; n++)     {
            y=0.5+0.5*dy+dy*n;
            y1=field[i][j-1][k];
            y2=field[i][j][k];
            y3=field[i][j+1][k];
            a=0.5*(y1+y3)-y2;
            b=2.0*y2-1.5*y1-0.5*y3;
            c=y1;
            j1=(j-jstart)*resolY+jstart;
            reField[i][j1+n][k]=a*y*y+b*y+c;
          }
        }
  }             //End of edge==0

}

void resolCalX(double ***field,double ***reField,int istart,int iend,int jstart,int jend,int kstart,int kend,int resolX,int rankX,int edge)
{
                             int ii,i1,i,j,k,n;
  double y1,y2,y3,a,b,c,dx,xx,x;

  dx=1.0/((double)resolX);
  if(edge==1)
  {
    for(i=istart; i<iend; i++)
      for(j=jstart; j<jend; j++)
        for(k=kstart; k<kend; k++)
        {
          for(n=0; n<resolX; n++)  {
            xx=dx*n;
            ii=((int)(0.5+xx-dx*dx))+i;
            y1=field[ii-1][j][k];
            y2=field[ii][j][k];
            y3=field[ii+1][j][k];
            a=0.5*(y1+y3)-y2;
            b=2.0*y2-1.5*y1-0.5*y3;
            c=y1;
            x=1.0+xx-(int)(0.5+xx);
            i1=(i-istart)*resolX+istart;
            reField[i1+n][j][k]=a*x*x+b*x+c;
          }
        }
  }
  else          //edge==0
  {
    for(i=istart; i<iend; i++)
      for(j=jstart; j<jend; j++)
        for(k=kstart; k<kend; k++)
        {
          for(n=0; n<resolX; n++)     {
            x=0.5+0.5*dx+dx*n;
            y1=field[i-1][j][k];
            y2=field[i][j][k];
            y3=field[i+1][j][k];
            a=0.5*(y1+y3)-y2;
            b=2.0*y2-1.5*y1-0.5*y3;
            c=y1;
            i1=(i-istart)*resolX+istart;
            reField[i1+n][j][k]=a*x*x+b*x+c;
          }
        }
  }             //End of edge==0

}

double randomValue(double beta)
{
   double r;
   int intRand, randRange=100, rangeDev;

   rangeDev=(int)(randRange*(1.0-beta));
   intRand = rand() % (randRange-rangeDev);
   r = ((double)intRand)/randRange+(1.0-beta);

   return r;
}

double calInter2D(double ***field,int i,int j,double x,double y)
{
   double result;

   result=(1.0-x)*(1.0-y)*field[i][j][0]
         +(1.0-x)*     y *field[i][j+1][0]
         +     x *(1.0-y)*field[i+1][j][0]
         +     x *     y *field[i+1][j+1][0];
   return result;
}
