#include <stdio.h>
#include <gsl/gsl_linalg.h>

double rounding(double x, int digit);

void findFactor(double *result,double *a_data,double *b_data,int row,int col,int indexI,int indexJ)
{
  int s,i,j,digit=7;
  double data[16],tmp,unit=0.999999999;

//  double aa_data[]={0.031349, 0.078871, 0.027269, 0.068604
//,0.078871, 0.198428, 0.068604, 0.172599
//,0.027269, 0.068604, 0.075909, 0.190976
//,0.068604, 0.172599, 0.190976, 0.480469};

  for(i=0; i<col*row; i++)  {
    tmp=a_data[i]*unit;
    data[i]=rounding(tmp,digit);
    a_data[i]=data[i];
  }

//  printf("The data matrix, i=%d, j=%d\n",indexI,indexJ);
//  for(i=0; i<4; i++)
//    for(j=0; j<4; j++)
//      printf(j==3? "%g\n":"%g ",data[i*4+j]);

//  for(i=0; i<16; i++)
//    if(a_data[i]!=data[i]) printf("data[%d]=%.10g, aa_data[%d]=%.10g\n",i,data[i],i,aa_data[i]);

  gsl_matrix_view m  =gsl_matrix_view_array(data,row,col);
//  gsl_matrix_view inv=gsl_matrix_view_array(invA,row,col);
  gsl_vector_view b  = gsl_vector_view_array(b_data,row);

  gsl_vector *x = gsl_vector_alloc(col);
  gsl_permutation *p = gsl_permutation_alloc(row);

  gsl_linalg_LU_decomp(&m.matrix,p,&s);
printf("before i=%d, j=%d\n",indexI,indexJ);
  gsl_linalg_LU_solve(&m.matrix,p,&b.vector,x);
printf("after i=%d, j=%d\n",indexI,indexJ);

//  printf("The b_data matrix\n");
//  for(i=0; i<4; i++)
//      printf(i==3? "%g\n":"%g ",b_data[i]);

//printf("x=\n");
//  gsl_vector_fprintf(stdout,x,"%g");

  for(i=0; i<4; i++)
    result[i]=gsl_vector_get(x,i);

//  for(i=0; i<4; i++)
//    printf("h[%d]=%g\n",i,result[i]);
/*
  tmp=0.0;
  for(i=0; i<4; i++)  {
    tmp+=result[i]*a_data[i];
  }
  if(result[3]>0)
  printf("i=%d,j=%d,result[%d]=%g,a_data[%d]=%g, tmp=%g, bdata[0]=%g\n",indexI,indexJ,0,result[0],0,a_data[0],tmp,b_data[0]);
*/


  gsl_permutation_free(p);
  gsl_vector_free(x);

}

double rounding(double x, int digit)
{
  double tmp,result;

  tmp=pow(10.0,digit);
  result=floor(x*tmp+0.5f)/tmp;
  return result;
}
